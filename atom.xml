<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Richie's memoirs]]></title>
  <subtitle><![CDATA[There is no royal road to learning.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yuqigong.github.io/"/>
  <updated>2015-01-26T08:29:38.651Z</updated>
  <id>http://yuqigong.github.io/</id>
  
  <author>
    <name><![CDATA[Richie]]></name>
    <email><![CDATA[yuqigong@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Git useing]]></title>
    <link href="http://yuqigong.github.io/2015/01/23/git-useing/"/>
    <id>http://yuqigong.github.io/2015/01/23/git-useing/</id>
    <published>2015-01-23T07:10:19.000Z</published>
    <updated>2015-01-23T07:52:53.000Z</updated>
    <content type="html"><![CDATA[<p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。</p>
<p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>
<h2 id="Git_与_Github_的区别">Git 与 Github 的区别</h2>
<p>Git，一个非常强大的版本管理工具。Github 则是一个基于 Git 的日益流行的开源项目托管库。Git 与 svn 的最大区别是，它的使用流程不需要联机，可以先将对代码的修改，评论，保存在本机。等上网之后，再实时推送过去。同时它创建分支与合并分支更容易，推送速度也更快，配合 Github 提交需求也更容易。</p>
<p><strong>总之，GitHub 是个网站，Git 是个软件。</strong></p>
<h2 id="Git_常用功能">Git 常用功能</h2>
<p><strong>初始化配置</strong></p>
<pre><code><span class="preprocessor">#配置使用git仓库的人员姓名</span>
git config --<span class="keyword">global</span> user.name <span class="string">"Your Name Comes Here"</span>

<span class="preprocessor">#配置使用git仓库的人员email</span>
git config --<span class="keyword">global</span> user.email yourname@yourdomain.example.com

<span class="preprocessor">#配置到缓存 默认15分钟</span>
git config --<span class="keyword">global</span> credential.helper cache

<span class="preprocessor">#配置缓存时间</span>
git config --<span class="keyword">global</span> credential.helper <span class="comment">'cache --timeout=3600'</span>

<span class="preprocessor">#配置显示</span>
git config --<span class="keyword">global</span> color.ui <span class="literal">true</span>

<span class="preprocessor">#设置别名</span>
git config --<span class="keyword">global</span> <span class="keyword">alias</span>.co checkout
git config --<span class="keyword">global</span> <span class="keyword">alias</span>.ci commit
git config --<span class="keyword">global</span> <span class="keyword">alias</span>.st status
git config --<span class="keyword">global</span> <span class="keyword">alias</span>.br branch

<span class="preprocessor">#配置编辑器</span>
git config --<span class="keyword">global</span> core.editor <span class="string">"subl"</span>
</code></pre><p><strong>基本使用</strong></p>
<pre><code>git status                      <span class="preprocessor"># 看到当前分支状态</span>
git clone                       <span class="preprocessor"># 克隆代码</span>
git pull                        <span class="preprocessor"># 拉取代码</span>
git <span class="keyword">add</span>                         <span class="preprocessor"># 添加代码</span>
git commit                      <span class="preprocessor"># 提交代码</span>
git <span class="keyword">push</span>                        <span class="preprocessor"># 推送代码</span>
git <span class="keyword">push</span> origin develop         <span class="preprocessor"># 在远端 origin 也创建该分支</span>
</code></pre><p><strong>切换\分支\对比\合并</strong></p>
<pre><code>git checkout                    <span class="comment"># 切换</span>
git checkout master             <span class="comment"># 切换到 Master 分支</span>
git checkout -b develop         <span class="comment"># 创建 develop 分支, 并切换到 develop 分支</span>
git branch                      <span class="comment"># 分支</span>
git branch develop              <span class="comment"># 创建 develop 分支</span>
git branch -d develop           <span class="comment"># 删除 develop 分支</span>
git diff                        <span class="comment"># 对比</span>
git <span class="built_in">merge</span>                       <span class="comment"># 合并</span>
git <span class="built_in">merge</span> <span class="comment">--no-ff develop       # 对 Develop 分支进行合并</span>
</code></pre><p><em>默认情况下，Git执行”快进式合并”（fast-farward merge），会直接将 Master 分支指向 Develop 分支。使用 <code>--no-ff</code> 参数后，会执行正常合并，在 Master 分支上生成一个新节点。</em> <strong>为了保证版本演进的清晰，我们希望采用这种做法。</strong></p>
<p><strong>查看、添加、提交、删除、找回，重置修改文件</strong></p>
<pre><code><span class="input"><span class="prompt">git help &lt;command&gt;</span>  <span class="comment"># 显示command的help</span></span>
<span class="input"><span class="prompt">git show            # 显示某次提交的内容
git show $id

git checkout  -- &lt;file&gt;</span>   <span class="comment"># 抛弃工作区修改</span></span>
<span class="input"><span class="prompt">git checkout  .           # 抛弃工作区修改

git add &lt;file&gt;</span>      <span class="comment"># 将工作文件修改提交到本地暂存区</span></span>
<span class="input"><span class="prompt">git add .           # 将所有修改过的工作文件提交暂存区

git rm &lt;file&gt;</span>       <span class="comment"># 从版本库中删除文件</span></span>
<span class="input"><span class="prompt">git rm &lt;file&gt;</span> --cached  <span class="comment"># 从版本库中删除文件，但不删除文件</span></span>
<span class="input"><span class="prompt">
git reset &lt;file&gt;</span>    <span class="comment"># 从暂存区恢复到工作文件</span></span>
git reset -- .      <span class="comment"># 从暂存区恢复到工作文件</span>
git reset --hard    <span class="comment"># 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span>

git commit &lt;file&gt;
<span class="input"><span class="prompt">git commit .
git commit -a           # 将git add, git rm和git ci等操作都合并在一起做
git commit -am "some comments"
git commit --amend      # 修改最后一次提交记录

git revert &lt;$id&gt;</span>    <span class="comment"># 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</span></span>
git revert <span class="constant">HEAD</span>     <span class="comment"># 恢复最后一次提交的状态</span>
</code></pre><p><strong>查看文件diff</strong></p>
<pre><code><span class="input"><span class="prompt">git diff &lt;file&gt;</span>                 <span class="comment"># 比较当前文件和暂存区文件差异</span></span>
<span class="input"><span class="prompt">git diff
git diff &lt;$id1&gt;</span> &lt;<span class="variable">$id2</span>&gt;          <span class="comment"># 比较两次提交之间的差异</span></span>
git diff &lt;branch1&gt;..&lt;branch2&gt;   <span class="comment"># 在两个分支之间比较</span>
git diff --staged               <span class="comment"># 比较暂存区和版本库差异</span>
git diff --cached               <span class="comment"># 比较暂存区和版本库差异</span>
git diff --stat                 <span class="comment"># 仅仅比较统计信息</span>
</code></pre><p><strong>查看提交记录</strong></p>
<pre><code>git <span class="built_in">log</span>
git <span class="built_in">log</span> &lt;<span class="built_in">file</span>&gt;                  <span class="comment"># 查看该文件每次提交记录</span>
git <span class="built_in">log</span> -p &lt;<span class="built_in">file</span>&gt;               <span class="comment"># 查看每次详细修改内容的diff</span>
git <span class="built_in">log</span> -p -<span class="number">2</span>                   <span class="comment"># 查看最近两次详细修改内容的diff</span>
git <span class="built_in">log</span> <span class="comment">--stat                  # 查看提交统计信息</span>
</code></pre><p><strong>回溯到历史版本</strong></p>
<pre><code>-<span class="ruby">-soft                          <span class="comment"># 回溯到已提交到索引但未提交到版本库的状态</span>
</span>-<span class="ruby">-hard                          <span class="comment"># 将文件内容也一同回溯</span>
</span>-<span class="ruby">-mixed                         <span class="comment"># 默认选项</span>
</span>git reset                       # 回溯到git add之前的状态
git reset commit-id             # 回溯指定版本的修改
git reset --soft                # 回溯到git add之后的状态
</code></pre><p><strong>还原已提交的修改</strong></p>
<pre><code>git revert HEAD         <span class="preprocessor"># 还原最近一次提交的修改</span>
git revert commit-<span class="keyword">id</span>    <span class="preprocessor"># 还原指定版本的修改</span>
</code></pre><p><strong>取得Git仓库</strong></p>
<pre><code><span class="preprocessor">#Clone远程版本库</span>
git clone git@your.repo.git

<span class="preprocessor">#初始化一个版本仓库</span>
git init

<span class="preprocessor">#添加远程版本库origin，语法为 git remote add [shortname] [url]</span>
git remote add origin git@your.repo.git

<span class="preprocessor">#查看远程仓库</span>
git remote -v

<span class="preprocessor">#拉取远程仓库的代码，例： 远程仓库 origin 下 master 分支</span>
git pull origin master
</code></pre><p><strong>提交你的修改</strong></p>
<pre><code><span class="preprocessor">#添加当前修改的文件到暂存区</span>
git add .

<span class="preprocessor">#如果你自动追踪文件，包括你已经手动删除的，状态为Deleted的文件</span>
git add -u

<span class="preprocessor">#提交你的修改</span>
git commit –m <span class="string">"你的注释"</span>

<span class="preprocessor">#推送你的更新到远程服务器,语法为 git push [远程名] [本地分支]:[远程分支]</span>
git push origin master

<span class="preprocessor">#查看文件状态</span>
git status

<span class="preprocessor">#跟踪新文件</span>
git add readme.txt

<span class="preprocessor">#从当前跟踪列表移除文件，并完全删除</span>
git rm readme.txt

<span class="preprocessor">#仅在暂存区删除，保留文件在当前目录，不再跟踪</span>
git rm –cached readme.txt

<span class="preprocessor">#重命名文件</span>
git mv reademe.txt readme

<span class="preprocessor">#查看提交的历史记录</span>
git log

<span class="preprocessor">#修改最后一次提交注释的，利用–amend参数</span>
git commit --amend

<span class="preprocessor">#忘记提交某些修改，下面的三条命令只会得到一个提交。</span>
git commit –m<span class="string">'add readme.txt'</span>
git add readme_forgotten
git commit –amend

<span class="preprocessor">#假设你已经使用git add .，将修改过的文件a、b加到暂存区</span>

<span class="preprocessor">#现在你只想提交a文件，不想提交b文件，应该这样</span>
git reset<span class="constant"> HEAD </span>b

<span class="preprocessor">#取消对文件的修改</span>
git checkout –- readme.txt
</code></pre><p><strong>查看、切换、创建和删除分支</strong></p>
<pre><code><span class="input"><span class="prompt">git branch -r           # 查看远程分支
git branch &lt;new_branch&gt;</span> <span class="comment"># 创建新的分支</span></span>
<span class="input"><span class="prompt">git branch -v           # 查看各个分支最后提交信息
git branch --merged     # 查看已经被合并到当前分支的分支
git branch --no-merged  # 查看尚未被合并到当前分支的分支
git branch -d &lt;branch&gt;</span>  <span class="comment"># 删除某个分支</span></span>
<span class="input"><span class="prompt">git branch -D &lt;branch&gt;</span>  <span class="comment"># 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span></span>
git branch --set-upstream-to=origin/master  <span class="comment"># 设置跟踪远程库</span>
<span class="input"><span class="prompt">git branch --unset-upstream                 # 取消跟踪的远程库
git branch -m &lt;old_branch&gt;</span> &lt;new_branch&gt;     <span class="comment"># 修改分支的名称</span></span>
<span class="input"><span class="prompt">
git checkout &lt;branch&gt;</span>                       <span class="comment"># 切换到某个分支</span></span>
<span class="input"><span class="prompt">git checkout -b &lt;new_branch&gt;</span>                <span class="comment"># 创建新的分支，并且切换过去</span></span>
<span class="input"><span class="prompt">git checkout -b &lt;new_branch&gt;</span> &lt;branch&gt;       <span class="comment"># 基于branch创建新的new_branch</span></span>
<span class="input"><span class="prompt">
git checkout $id                    # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除
git checkout $id -b &lt;new_branch&gt;</span>    <span class="comment"># 把某次历史提交记录checkout出来，创建成一个分支</span></span>
</code></pre><p><strong>分支合并和rebase</strong></p>
<pre><code><span class="input"><span class="prompt">git merge &lt;branch&gt;</span>               <span class="comment"># 将branch分支合并到当前分支</span></span>
<span class="input"><span class="prompt">git merge origin/master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交

git rebase master &lt;branch&gt;</span>       <span class="comment"># 将master rebase到branch，相当于：</span></span>
<span class="input"><span class="prompt">git checkout &lt;branch&gt;</span> &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span>
</code></pre><p><strong>Git补丁管理(方便在多台机器上开发同步时用)</strong></p>
<pre><code><span class="input"><span class="prompt">git diff &gt;</span> ../sync.patch         <span class="comment"># 生成补丁</span></span>
git apply ../sync.patch          <span class="comment"># 打补丁</span>
git apply --check ../sync.patch  <span class="comment">#测试补丁能否成功</span>
</code></pre><p><strong>Git暂存管理</strong></p>
<pre><code>git stash                           <span class="comment"># 暂存</span>
git stash list                      <span class="comment"># 列所有stash</span>
git stash <span class="keyword">pop</span>
<span class="comment"># 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。pop会从最近的一个stash中读取内容并恢复。</span>
git stash apply stash<span class="variable">@{1}</span>           <span class="comment"># 恢复暂存的内容,stash@{1}为指定的版本号</span>
git stash drop                      <span class="comment"># 删除暂存区</span>
git stash branch &lt;new_branch&gt;       <span class="comment"># 从暂存中创建分支</span>
git stash save -u                   <span class="comment"># 暂存 untrack 的文件</span>
</code></pre><p><strong>Git远程分支管理</strong></p>
<pre><code>git pull                         <span class="comment"># 抓取远程仓库所有分支更新并合并到本地</span>
git pull --<span class="keyword">no</span>-ff                 <span class="comment"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span>
git fetch origin                 <span class="comment"># 抓取远程仓库更新</span>
git merge origin/master          <span class="comment"># 将远程主分支合并到本地当前分支</span>
git checkout --track origin/branch     <span class="comment"># 跟踪某个远程分支创建相应的本地分支</span>
git checkout -b &lt;local_branch&gt; origin/&lt;remote_branch&gt;  <span class="comment"># 基于远程分支创建本地分支，功能同上</span>

git <span class="keyword">push</span>                         <span class="comment"># push所有分支</span>
git <span class="keyword">push</span> origin master           <span class="comment"># 将本地主分支推到远程主分支</span>
git <span class="keyword">push</span> -u origin master        <span class="comment"># 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span>
git <span class="keyword">push</span> origin &lt;local_branch&gt;   <span class="comment"># 创建远程分支， origin是远程仓库名</span>
git <span class="keyword">push</span> origin &lt;local_branch&gt;:&lt;remote_branch&gt;  <span class="comment"># 创建远程分支</span>
git <span class="keyword">push</span> origin :&lt;remote_branch&gt;  <span class="comment">#先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span>
</code></pre><p><strong>基本的分支管理</strong></p>
<pre><code><span class="preprocessor">#创建一个分支</span>
git branch iss53

<span class="preprocessor">#切换工作目录到iss53</span>
git chekcout iss53

<span class="preprocessor">#将上面的命令合在一起，创建iss53分支并切换到iss53</span>
git chekcout –b iss53

<span class="preprocessor">#合并iss53分支，当前工作目录为master</span>
git merge iss53

<span class="preprocessor">#合并完成后，没有出现冲突，删除iss53分支</span>
git branch –d iss53

<span class="preprocessor">#拉去远程仓库的数据，语法为 git fetch [remote-name]</span>
git fetch

<span class="preprocessor">#fetch 会拉去最新的远程仓库数据，但不会自动到当前目录下，要自动合并</span>
git pull

<span class="preprocessor">#查看远程仓库的信息</span>
git remote show origin

<span class="preprocessor">#建立本地的dev分支追踪远程仓库的develop分支</span>
git checkout –b dev origin/develop
</code></pre><p><strong>Git远程仓库管理</strong></p>
<pre><code>git remote -v                    <span class="comment"># 查看远程服务器地址和仓库名称</span>
git remote show origin           <span class="comment"># 查看远程服务器仓库状态</span>
git remote <span class="built_in">add</span> origin git@ github:robbin/robbin_site.git         <span class="comment"># 添加远程仓库地址</span>
git remote <span class="built_in">set</span>-url origin git@ github.com:robbin/robbin_site.git <span class="comment"># 设置远程仓库地址(用于修改远程仓库地址)</span>
git remote rm &lt;repository&gt;       <span class="comment"># 删除远程仓库</span>
</code></pre><p><strong>创建远程仓库</strong></p>
<pre><code>git clone --bare robbin_site robbin_site.git  <span class="comment"># 用带版本的项目创建纯版本仓库</span>
scp -r my_project.git git<span class="variable">@git</span>.csdn.net:~      <span class="comment"># 将纯仓库上传到服务器上</span>

<span class="keyword">mkdir</span> robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init <span class="comment"># 在服务器创建纯仓库</span>
git remote add origin git<span class="variable">@github</span>.com:robbin/robbin_site.git    <span class="comment"># 设置远程仓库地址</span>
git <span class="keyword">push</span> -u origin master                                      <span class="comment"># 客户端首次提交</span>
git <span class="keyword">push</span> -u origin develop  <span class="comment"># 首次将本地develop分支提交到远程develop分支，并且track</span>

git remote set-head origin master   <span class="comment"># 设置远程仓库的HEAD指向master分支</span>
</code></pre><p><strong> 远程仓库相关命令 </strong></p>
<pre><code>git remote -v                           # 查看远程仓库
git remote add [name] [url]             # 添加远程仓库
git remote rm [name] # 删除远程仓库
git remote set-url --push[<span class="link_label">name</span>][<span class="link_reference">newUrl</span>] # 修改远程仓库
git pull [remoteName] [localBranchName] # 拉取远程仓库
git push [remoteName] [localBranchName] # 推送远程仓库
</code></pre><p><strong>创建一个镜像版本库</strong></p>
<pre><code>git clone 原始版本库路径 镜像版本库路径(<span class="built_in">local</span>)
git fetch origin 更新 origin 分支。
(如果 origin 分支不是最新的原始版本库，会产生错误的补丁文件,不会自动<span class="built_in">merge</span>,仅下载 &amp; 更新索引)
git rebase origin 将工作迁移到最新原始版本库基础上
</code></pre><p><strong> 版本(tag)操作相关命令 </strong></p>
<pre><code>git tag                              <span class="comment">#查看版本</span>
git tag [name]                       <span class="comment">#创建版本</span>
git tag -d [name]                    <span class="comment">#删除版本</span>
git tag -r                           <span class="comment">#查看远程版本</span>
git push origin [name]               <span class="comment">#创建远程版本(本地版本push到远程)</span>
git push origin <span class="symbol">:refs/tags/</span>[name]    <span class="comment">#删除远程版本</span>
</code></pre><p><strong> 子模块(submodule)相关操作命令 </strong></p>
<pre><code>添加子模块：<span class="variable">$ </span>git submodule add [url] [path]
如：<span class="variable">$ </span>git submodule add <span class="symbol">git:</span>/<span class="regexp">/github.com/soberh</span><span class="regexp">/ui-libs.git src/main</span><span class="regexp">/webapp/ui</span>-libs
初始化子模块：<span class="variable">$ </span>git submodule init ----只在首次检出仓库时运行一次就行
更新子模块：<span class="variable">$ </span>git submodule update ----每次更新或切换分支后都需要运行一下
删除子模块：（分<span class="number">4</span>步走哦）
<span class="number">1</span>)<span class="variable">$ </span>git rm --cached [path]
<span class="number">2</span>) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉
<span class="number">3</span>) 编辑“.git/config”文件，将子模块的相关配置节点删除掉
<span class="number">4</span>) 手动删除子模块残留的目录
</code></pre><p><strong>其他技巧</strong></p>
<pre><code><span class="built_in">echo</span> <span class="string">"test"</span>&gt;.gitignore      <span class="comment">#增加到忽略列表</span>
<span class="built_in">echo</span> <span class="string">"test"</span> &gt;&gt; README.md    <span class="comment">#创建 README.md并写入test</span>
touch test                  <span class="comment">#创建 test 文件</span>
</code></pre><p>Git</p>
<p><a href="http://callmepeanut.blog.51cto.com/7756998/1304912" target="_blank" rel="external">GitHub使用入门</a></p>
<p><a href="http://blog.csdn.net/hutaoer06051/article/details/8275069" target="_blank" rel="external">git config命令使用第一篇——介绍，基本操作，增删改查</a></p>
<p><a href="https://help.github.com/articles/generating-ssh-keys#platform-windows" target="_blank" rel="external">Generating SSH Keys</a></p>
<p><a href="https://wiki.archlinux.org/index.php/SSH_Keys_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87" target="_blank" rel="external">SSH Keys (简体中文)</a>)</p>
<p><a href="http://www.ibm.com/developerworks/cn/linux/security/openssh/part2/" target="_blank" rel="external">通用线程: OpenSSH 密钥管理，第 2 部分</a></p>
<p>Git Stash</p>
<p><a href="http://blog.wu-boy.com/2013/08/git-rebase-stash-tip/" target="_blank" rel="external">Git rebase + stash 小技巧</a></p>
<p><a href="http://blog.hanfeisun.info/2012/12/git-stash-adventure/" target="_blank" rel="external">Git Stash 历险记</a></p>
<p><a href="http://gitbook.liuhui998.com/" target="_blank" rel="external">Git Community Book 中文版</a></p>
<p><a href="http://git-scm.com/book" target="_blank" rel="external">Pro Git</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。</p>
<p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>
<h2 id="Git_与_Github_的区别]]>
    </summary>
    
      <category term="git" scheme="http://yuqigong.github.io/tags/git/"/>
    
      <category term="technology" scheme="http://yuqigong.github.io/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sublime Text 学习笔记]]></title>
    <link href="http://yuqigong.github.io/2014/12/30/sublime-plugin/"/>
    <id>http://yuqigong.github.io/2014/12/30/sublime-plugin/</id>
    <published>2014-12-30T14:46:25.000Z</published>
    <updated>2015-01-21T05:28:10.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Preferences-sublime-settings">Preferences.sublime-settings</h2>
<p>然而在 Windows 和 Linux 上，這些按鍵會與 Sublime Text 2 原本的一些快捷鍵衝突，所以這些快捷鍵預設是關閉的，你可以在偏好設定裡加上以下這行來啟用：</p>
<pre><code><span class="string">"vintage_ctrl_keys"</span>: <span class="literal">true</span>
</code></pre><h2 id="sublime_plugin">sublime plugin</h2>
<pre><code><span class="preprocessor"># 自动对齐代码</span>
Alignment

<span class="preprocessor"># 自动匹配文件名</span>
AutoFileName

<span class="preprocessor"># 自动补齐 `css` 前缀</span>
Autoprefixer

<span class="preprocessor"># Bracket Highlighter 匹配等多种括号: [], (), {}, "", '', &lt;tag&gt;&lt;/tag&gt;, 甚至定制的 Bracket。</span>
BracketHighlighter

<span class="preprocessor"># 历史剪切板</span>
Clipboard History

<span class="preprocessor"># 颜色取色器</span>
Color​Picker

<span class="preprocessor"># javascript 文档注释块</span>
DocBlockr

<span class="preprocessor"># HTML\CSS 编写神器，提供特殊的简写语法。</span>
Emmet

<span class="preprocessor"># 在可视区域内查找文本，并快速编辑</span>
EasyMotion

<span class="preprocessor"># 帮助开发者在不同的编辑器，IDE之间定义和维护统一的编程风格。EditorConfig工程包含一个文件，定义了编程风格，文本编辑器插件集合，让编辑器可以读取该文件并依照它来定义风格。</span>
EditorConfig

<span class="preprocessor"># 协作编程</span>
Floobits

<span class="preprocessor"># 文件对比工具，支持第三方对比工具。</span>
FileDiffs

<span class="preprocessor"># `format` HTML\CSS\JS，混合也支持。</span>
HTML-CSS-JS Prettify

<span class="preprocessor"># 颜色转化</span>
Hex-to-HSL-Color

<span class="preprocessor"># `format` HTML\CSS\JS，混合也支持。</span>
Hayaku

<span class="preprocessor"># 定位 `css` 定义所在位置</span>
Goto-CSS-Declaration

<span class="preprocessor"># 转码工具</span>
GBK to UTF8

<span class="preprocessor"># `gist` 代码管理工具。</span>
Gist

<span class="preprocessor"># 如名， Sulime Text 中集成 Git</span>
Git

<span class="preprocessor"># 显示一个图标在行号里区域指示是否一行被插入,修改或删除。</span>
GitGutter

<span class="preprocessor"># 类似 GitGutter</span>
Modific

<span class="preprocessor"># `less` 转化为 `css`</span>
Less2Css

<span class="preprocessor"># 样式修改工具</span>
LiveStyle

<span class="preprocessor"># 自动刷新浏览器</span>
LiveReload

<span class="preprocessor"># 清除多余空格</span>
TrailingSpaces

<span class="preprocessor"># `format` JSON数据</span>
Pretty JSON

<span class="preprocessor"># `Side Bar` 高级功能扩展</span>
SideBarEnhancements

<span class="preprocessor"># `Javascript` 语法检查</span>
SublimeLinter

<span class="preprocessor"># `Javascript` 类、模块预编译</span>
SublimeCodeIntel

<span class="preprocessor"># `css` 顺序排列</span>
sublime-csscomb

<span class="preprocessor"># 自动化</span>
SublimeAllAutocomplete

<span class="preprocessor"># 标签|标记|折叠</span>
BufferScroll

<span class="preprocessor"># `org mode` 扩展支持</span>
orgmode

<span class="preprocessor"># 支持 `Todo` `task`</span>
PlainTasks

<span class="preprocessor"># `vi` 扩展</span>
Vintageous

<span class="preprocessor"># `vi` 模式下，修改行号显示方式</span>
VintageLines

<span class="preprocessor"># sublime &amp;&amp; vim 两个最爱的编辑器合二为一</span>
actualvim

<span class="preprocessor"># `markdown` 支持</span>
MarkdownEditing

<span class="preprocessor"># 调试工具，需要配合 Chrome</span>
Web Inspector

<span class="preprocessor"># 可以快速获取文件或库</span>
Nettuts+ Fetch
</code></pre><h2 id="VI_操作">VI 操作</h2>
<h4 id="基本编辑">基本编辑</h4>
<pre><code>i：在当前字符前面进入输入模式  (i=insert)

I：在当前行前面进入输入模式

o：插入一个新行，并且进入输入模式

O：上一行插入一个新行，并且进入输入模式

a：在当前字符后面进入输入模式  (a=append)

A：在当前行后面进入输入模式

s：删除当前字符并且进入输入模式

S：删除当前行并且进入输入模式

r：替换当前字符

R：替换当前字符及其后的字符【当前及其后字符被覆盖】


u：撤销最后一次更改

U：撤销光标所在行的所有更改


nx：删除由光标位置起始后的n个字符（含光标位置）x =dl(删除当前光标下的字符)

nX：删除由光标位置起始前的n个字符（含光标位置）X =dh(删除当前光标左边的字符)

d0：删至行首

d$：删至行尾

dfa：表示删除从当前光标到光标后面的第一个a字符之间的内容

dd：删除一行（3dd：删除3行）

D：代表d$(删除到行尾的内容)

C：代表c$(修改到行尾的内容)

<span class="bullet">---

</span>yy：复制当前行
p：粘贴到下一行
P：粘贴到上一行

<span class="bullet">---

</span>n：查找下一个
N：查找上一个
/：进入查找模式，向下搜索
?：进入查找模式，向上搜索

<span class="bullet">---

</span>:w  保存
<span class="attribute">:x|:wq</span>   保存并退出
:q!  不保存并退出

<span class="bullet">---

</span>\&gt;&gt;:    右移两个tab

\&lt;&lt;:    左移两个tab

<span class="bullet">---

</span>zf: 折叠（需加方向键）

zo: 展开（空格也可以展开）
</code></pre><h4 id="基本移动">基本移动</h4>
<pre><code>h, <span class="built_in">j</span>, k, l   （左下上右）
</code></pre><h4 id="光标移动">光标移动</h4>
<pre><code>H, 移到屏幕顶端的行-home

M, 移到屏幕中央的行-<span class="keyword">middle</span>

L, 移到屏幕底端的行-<span class="keyword">last</span>

G, 直接跳转到文件的底部

gg, 跳转到文件首

nH, 移到屏幕顶端往下的第n行

nL, 移到屏幕底端网上的第n行
</code></pre><h4 id="单词移动">单词移动</h4>
<pre><code>w, 光标移动到下一个单词的首字母前

e, 光标移动到所在单词的最后字符前

b, 光标移动到上一个单词的首字母前
</code></pre><h4 id="行内移动">行内移动</h4>
<pre><code><span class="number">0</span>, 光标移动到所在行的行首

<span class="variable">$,</span> 光标移动到所在行的行末

^, 光标移动到所在行开始的第一个非空字符
</code></pre><h4 id="段落移动">段落移动</h4>
<pre><code><span class="rules">{<span class="rule">, 移动至上一段落的换行

}</span></span>, 移动至下一段落的换行

%, 可以匹配<span class="rules">{<span class="rule">}</span></span>,"",(),<span class="attr_selector">[]</span>之间跳转。
</code></pre><h4 id="屏幕移动">屏幕移动</h4>
<pre><code><span class="xml"></span><span class="keyword">^F</span><span class="xml">, 屏幕向下滚动一屏

</span><span class="keyword">^B</span><span class="xml">, 屏幕向上滚动一屏

</span><span class="keyword">^E</span><span class="xml">, 屏幕向下滚动一行

</span><span class="keyword">^Y</span><span class="xml">, 屏幕向上滚动一行

</span><span class="keyword">^D</span><span class="xml">, 屏幕向下滚动半屏

</span><span class="keyword">^U</span><span class="xml">, 屏幕向上滚动半屏</span>
</code></pre><h4 id="重绘当前屏幕">重绘当前屏幕</h4>
<pre><code>zt, 当前所在行置为屏幕顶。

zz, 当前所在行置为屏幕中。

zb, 当前所在行置为屏幕底。

<span class="number">50</span><span class="comment">%, 光标定位在文件的中间</span>
</code></pre><h2 id="参考">参考</h2>
<p><a href="http://blog.jobbole.com/79326/" target="_blank" rel="external">推荐！Sublime Text 最佳插件列表</a></p>
<p><a href="http://www.zhihu.com/question/19976788" target="_blank" rel="external">Sublime Text 有哪些实用技巧？</a></p>
<p><a href="http://blog.csdn.net/wklken/article/details/7533272" target="_blank" rel="external">Linux新手生存笔记——vim训练稿</a></p>
<p><a href="http://blog.csdn.net/jokes000/article/details/17794375" target="_blank" rel="external">我的Sublime Text 3配置 and vim conf</a></p>
<p><a href="http://blog.51yip.com/linux/1140.html" target="_blank" rel="external">vim</a></p>
<p><a href="http://blog.csdn.net/xueziheng/article/details/2048054" target="_blank" rel="external">vi 命令 用法</a></p>
<p><a href="https://github.com/SublimeText/VintageEx" target="_blank" rel="external">VintageEx</a></p>
<p><a href="http://blog.csdn.net/iamduoluo/article/details/7890905" target="_blank" rel="external">Sublime 下配置vim模式</a></p>
<p><a href="https://github.com/tednaleid/sublime-EasyMotion" target="_blank" rel="external">sublime-EasyMotion</a></p>
<p><a href="https://github.com/SublimeCodeIntel/SublimeCodeIntel" target="_blank" rel="external">SublimeCodeIntel</a></p>
<p><a href="https://github.com/hayaku/hayaku" target="_blank" rel="external">hayaku</a></p>
<p><a href="https://github.com/weslly/Nettuts-Fetch" target="_blank" rel="external">Nettuts-Fetch</a></p>
<p><a href="http://docs.sublimetext.tw/basic-concepts/" target="_blank" rel="external">Sublime Text 手冊</a></p>
<p><a href="http://opensourcehacker.com/2013/03/04/javascript-autocompletions-and-having-one-for-sublime-text-2/" target="_blank" rel="external">Javascript autocompletions and having one for Sublime Text 2</a></p>
<p><a href="http://www.camdemy.com/media/6118" target="_blank" rel="external">Sublime Text 2 系列</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Preferences-sublime-settings">Preferences.sublime-settings</h2>
<p>然而在 Windows 和 Linux 上，這些按鍵會與 Sublime Text 2 原本的一些快捷鍵衝突，所以這些快捷鍵預設是]]>
    </summary>
    
      <category term="sublime" scheme="http://yuqigong.github.io/tags/sublime/"/>
    
      <category term="tools" scheme="http://yuqigong.github.io/categories/tools/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[nginx 学习]]></title>
    <link href="http://yuqigong.github.io/2014/12/29/nginx/"/>
    <id>http://yuqigong.github.io/2014/12/29/nginx/</id>
    <published>2014-12-29T14:46:25.000Z</published>
    <updated>2015-01-23T07:45:15.000Z</updated>
    <content type="html"><![CDATA[<p><strong> nginx 命令 </strong></p>
<pre><code>start nginx            <span class="comment"># 启动</span>
nginx <span class="operator">-s</span> stop         <span class="comment"># 快速退出</span>
nginx <span class="operator">-s</span> quit         <span class="comment"># 优雅退出</span>
nginx <span class="operator">-s</span> reload     <span class="comment"># 更换配置，启动新的工作进程，优雅的关闭以往的工作进程</span>
nginx <span class="operator">-s</span> reopen     <span class="comment"># 重新打开日志文件</span>
</code></pre><p>可以在命令行运行tasklist命令来查看nginx进程：</p>
<pre><code>tasklist /<span class="keyword">fi</span> <span class="string">"imagename eq nginx.exe"</span>
</code></pre><p><strong> nginx 配置 </strong></p>
<pre><code><span class="title">http</span> {
  <span class="title">server</span> {
    <span class="comment">#1.侦听80端口</span>
    <span class="title">listen</span>  <span class="number">80</span>;
    <span class="title">location</span> / {
        <span class="comment"># 2. 默认主页目录在nginx安装目录的html子目录。</span>
        <span class="title">root</span>   html;
        <span class="title">index</span>  index.html index.htm;
        <span class="comment"># 3. 没有索引页时，罗列文件和子目录</span>
        <span class="title">autoindex</span> <span class="built_in">on</span>;
        <span class="title">autoindex_exact_size</span> <span class="built_in">on</span>;
        <span class="title">autoindex_localtime</span> <span class="built_in">on</span>;
    }
    <span class="comment"># 4.指定虚拟目录</span>
    <span class="title">location</span> /tshirt {
        <span class="title">alias</span> D:\programs\Apache2\htdocs\tshirt;
        <span class="title">index</span> index.html index.htm;
    }
  }
  <span class="comment"># 5.虚拟主机www.emb.info配置</span>
  <span class="title">server</span> {
    <span class="title">listen</span>          <span class="number">80</span>;
    <span class="title">server_name</span>     www.emb.<span class="built_in">info</span>;
    <span class="title">access_log</span> emb.info/logs/access.log;
    <span class="title">location</span> / {
        <span class="title">index</span> index.html;
        <span class="title">root</span>  emb.info/htdocs;
    }
  }
}
</code></pre><p><strong> nginx issue </strong></p>
<pre><code><span class="number">2012</span>/<span class="number">04</span>/<span class="number">02</span> <span class="number">13</span>:<span class="number">55</span>:<span class="number">59</span> [emerg] <span class="number">7864</span>#<span class="number">2376</span>: bind() <span class="keyword">to</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">80</span> failed (<span class="number">10013</span>: An attempt was made <span class="keyword">to</span> <span class="keyword">access</span> a socket <span class="keyword">in</span> a way forbidden by its <span class="keyword">access</span> permissions)
</code></pre><p>在 cmd 中，运行以下命令：</p>
<pre><code>netstat -aon <span class="string">| findstr :80</span>
</code></pre><p>看到80端口果真被占用。发现占用的pid是4，名字是System。怎么禁用呢？</p>
<p>解决办法：</p>
<p>1、打开注册表：regedit</p>
<p>2、找到：HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\HTTP</p>
<p>3、找到一个REG_DWORD类型的项Start，将其改为0</p>
<p>4、重启系统，System进程不会占用80端口</p>
<p>重启之后，start nginx.exe 。在浏览器中，输入127.0.01，即可看到亲爱的“Welcome to nginx!” 了。</p>
<p>参考</p>
<p><a href="http://nginx.org/cn/docs/windows.html" target="_blank" rel="external">nginx Windows版使用说明</a></p>
<p><a href="http://koda.iteye.com/blog/601249" target="_blank" rel="external">Nginx - Windows下Nginx基本安装和配置</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong> nginx 命令 </strong></p>
<pre><code>start nginx            <span class="comment"># 启动</span>
nginx <span class="operator">-s</span]]>
    </summary>
    
      <category term="nginx" scheme="http://yuqigong.github.io/tags/nginx/"/>
    
      <category term="technology" scheme="http://yuqigong.github.io/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mac环境下命令的使用]]></title>
    <link href="http://yuqigong.github.io/2014/12/24/mac-command/"/>
    <id>http://yuqigong.github.io/2014/12/24/mac-command/</id>
    <published>2014-12-24T14:46:25.000Z</published>
    <updated>2015-01-21T05:30:53.000Z</updated>
    <content type="html"><![CDATA[<pre><code>ls -l -a   列出指定目录下文件
           -l 显示文件的详细信息
           -a 显示目录下所有文件（包括隐藏文件）
           -d 显示指定目录pwd  显示当前的工作目录的路径
cd 切换工作目录
. 表示当前目录
.. 表示当前目录的上一级目录
/  根目录/目录分隔符
./         当前目录
../        回到上一级目录
相对路径/绝对路径 凡是以/开始的路径，都是绝对路径
cd .. 进入上一级目录
cd 加波浪符号：进入当前登陆用户目录下
mkdir：创建新目录
<span class="symbol">rmdir:</span>只能删除空目录
cat 文件名.txt <span class="symbol">:</span>查看指定文本文件的内容（适合查看小文件）
more 分屏暂停显示文本文件内容
diff/vimdiff   比较两个文件
touch 目录名：查看指定文件，若没有此文件则创建空文件；更改文件时间戳
chmod 更改指定文件或目录的权限
属主  属组  其他人
rwx   rwx    rwx
<span class="number">421</span>   <span class="number">421</span>    <span class="number">421</span>
<span class="number">2</span>^<span class="number">2</span>+<span class="number">2</span>^<span class="number">1</span>+<span class="number">2</span>^<span class="number">0</span>
chmod u-x,g-wx,o=- file 表示属主用户对file文件没有可执行操作权限；属组用户对file文件没有可读，可执行权限；其他人对file文件没有权限。
<span class="input"><span class="prompt">ps aux 静态查看进程
top 动态查看进程
echo:输出字符串或变量值
&gt;</span>   指定的文件若不存在，创建文件；若存在，覆盖原文件内容</span>
<span class="input"><span class="prompt">输出重定向符

&gt;&gt;</span>  指定的文件若不存在，创建文件；若存在，在原文件内容后追加内容</span>
<span class="input"><span class="prompt">
区别
  echo “字符串” &gt;</span> file</span>
<span class="input"><span class="prompt">
  echo “字符串” &gt;&gt;</span> file</span>
kill 杀死进程
kill -<span class="number">9</span> pid       杀死指定进程
man  显示帮助文件（按q退出）
ifconfig 查看或修改ip地址
sudo 以root权限执行一次命令
clear / ctrl+<span class="constant">L</span>   清屏
ctrl+<span class="constant">C</span>     无条件终止
rm –rf * 强制删除当前目录下所有文件
rm -rf        删除文件或目录
cp -r         复制文件
mv         移动文件
stat 文件名  查看文件详细信息
find  查找文件
find / -name *       查找文件


在编辑文件内容时快捷键的使用：
a  在光标下一个字符处插入
i  在光标处插入
o  在光标所在行下一行插入一个新行
r 替换光标所在字符
<span class="constant">R</span>  进入到替换模式
dd  剪切光标所在的一行内容
ndd  剪切从光标所在行开始后的<span class="constant">N</span>行内容
yy   复制光标所在的一行内容
nyy  复制从光标所在行开始后的<span class="constant">N</span>行内容
p   粘贴到光标所在行
<span class="constant">D</span>   删除光标右边的所有内容
x   删除光标所在字符
gg 将光标快速移动到文件首
<span class="constant">G</span>  将光标快速移动到文件尾
零  将光标快速移动到行首
<span class="variable">$ </span>  将光标快速移动到行尾
/n         查找内容 n跳到下一项
gg=<span class="constant">G</span> 段落对齐
<span class="symbol">:set</span> nu 设置行号
<span class="symbol">:set</span> nonu   取消行号
<span class="symbol">:</span>行号   定位到指定行
u    撤销
<span class="symbol">:x</span>   相当于<span class="symbol">:wq</span>
<span class="symbol">:w</span>   保存
<span class="symbol">:q</span>   未保存直接退出
<span class="symbol">:wq</span>  保存并退出
<span class="symbol">:w!</span>  强制保存
<span class="symbol">:q!</span>  强制退出
<span class="symbol">:wq!</span> 强制保存退出
<span class="symbol">:X!</span>  强制保存退出
<span class="symbol">:syntax</span> on/off 开启/关闭语法提示
shell的意外关闭 .*.swp （首先用ls –a 命令找到相应的.*.swp文件，然后删除.*.swp文件）
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<pre><code>ls -l -a   列出指定目录下文件
           -l 显示文件的详细信息
           -a 显示目录下所有文件（包括隐藏文件）
           -d 显示指定目录pwd  显示当前的工作目录的路径
cd 切换工作目录
. 表示]]>
    </summary>
    
      <category term="mac" scheme="http://yuqigong.github.io/tags/mac/"/>
    
      <category term="learn" scheme="http://yuqigong.github.io/categories/learn/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ie视觉滤镜和动画效果]]></title>
    <link href="http://yuqigong.github.io/2014/12/23/ie-filter-transition/"/>
    <id>http://yuqigong.github.io/2014/12/23/ie-filter-transition/</id>
    <published>2014-12-23T14:46:25.000Z</published>
    <updated>2015-01-21T05:31:17.000Z</updated>
    <content type="html"><![CDATA[<p>参考：<a href="http://msdn.microsoft.com/en-us/library/ie/ms532853(v=vs.85" target="_blank" rel="external">Visual Filters and Transitions Reference</a>.aspx)、<a href="http://samples.msdn.microsoft.com/workshop/samples/author/dhtml/DXTidemo/DXTidemo.htm" target="_blank" rel="external">滤镜在线预览</a>、<a href="http://samples.msdn.microsoft.com/workshop/samples/author/dhtml/filters/matrix.htm" target="_blank" rel="external">Matrix 在线预览</a>、<a href="http://msdn.microsoft.com/en-us/library/ie/ms533035(v=vs.85" target="_blank" rel="external">Introduction to Filters and Transitions</a>.aspx)</p>
<p>注意：<strong>An object must have layout for the filter to render.</strong> A simple way to accomplish this is to give the element a specified height and width, or both. However, there are several other properties that can give an element layout. For more information about these other properties, see the <strong><a href="http://msdn.microsoft.com/en-us/library/ie/ms530764(v=vs.85" target="_blank" rel="external">hasLayout</a>.aspx)</strong> property.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>参考：<a href="http://msdn.microsoft.com/en-us/library/ie/ms532853(v=vs.85" target="_blank" rel="external">Visual Filters and Transitions Re]]>
    </summary>
    
      <category term="css" scheme="http://yuqigong.github.io/tags/css/"/>
    
      <category term="technology" scheme="http://yuqigong.github.io/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ie6 select 覆盖层问题]]></title>
    <link href="http://yuqigong.github.io/2014/12/19/ie6-select/"/>
    <id>http://yuqigong.github.io/2014/12/19/ie6-select/</id>
    <published>2014-12-19T14:46:25.000Z</published>
    <updated>2015-01-21T05:32:51.000Z</updated>
    <content type="html"><![CDATA[<p>介绍：ie6 下 select z-index 有bug，导致层不能覆盖其上<br>目标：解决 ie6 下层不能覆盖在 select 上<br>原理：利用元素 <strong>iframe</strong> 可以覆盖 <strong>select</strong> 的特性<br>已知问题：需要多余的标签，还需要使用滤镜、以及指定大小<br>其他：解决这个问题的基础是要用到 <strong>iframe</strong> ，也可以用 <strong>iframe</strong> 去包裹 <strong>select</strong>，另外，jQuery 上有一个插件 <a href="http://plugins.jquery.com/bgiframe/" target="_blank" rel="external">bgiframe</a> 也可以解决这个bug。<br>备注：顺便提一下，<strong>iframe</strong> 在ie中存在属性 <em>allowTransparency</em> 通过这个属性可以设置 <strong>iframe</strong> 为透明的。<br>参考：<a href="http://twinkleliang.iteye.com/blog/1138841" target="_blank" rel="external">使用Iframe解决IE6下Div/UL/Li 挡不住Select box 的3法</a></p>
<p>代码示例，</p>
<script src="https://gist.github.com/flyfishtome/3820685a41ca44984d59.js"></script>]]></content>
    <summary type="html">
    <![CDATA[<p>介绍：ie6 下 select z-index 有bug，导致层不能覆盖其上<br>目标：解决 ie6 下层不能覆盖在 select 上<br>原理：利用元素 <strong>iframe</strong> 可以覆盖 <strong>select</strong> 的特性<]]>
    </summary>
    
      <category term="css" scheme="http://yuqigong.github.io/tags/css/"/>
    
      <category term="technology" scheme="http://yuqigong.github.io/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git Problem Sets]]></title>
    <link href="http://yuqigong.github.io/2014/12/15/git-problem-sets/"/>
    <id>http://yuqigong.github.io/2014/12/15/git-problem-sets/</id>
    <published>2014-12-15T14:46:25.000Z</published>
    <updated>2015-01-21T05:33:21.000Z</updated>
    <content type="html"><![CDATA[<pre><code>Command: git mv
<span class="operator"><span class="keyword">Show</span>: fatal: destination <span class="keyword">exists</span>
<span class="keyword">To</span> solve: git mv <span class="comment">--force</span>
<span class="keyword">Describe</span>: 当重命名时，如果只是重命名文件名称的大小写，需要加上 <span class="comment">--force 参数</span>

Command: git <span class="keyword">reset</span>, git clean
<span class="keyword">Show</span>:
<span class="keyword">To</span> solve: git <span class="keyword">reset</span> <span class="comment">--hard &amp;&amp; git clean -xdf</span>
<span class="keyword">Describe</span>: 多余的文件且没被追踪，需要删除</span>
</code></pre><p><strong>Problem Sets</strong></p>
<ul>
<li><p>warning: LF will be replaced by CRLF | fatal: CRLF would be replaced by LF</p>
<pre><code>  在Mac上设置 <span class="variable">autocrlf =</span> input, 在Windows上设置<span class="variable">autocrlf =</span> <span class="constant">true</span>（默认值）。
  Windows：（<span class="constant">true</span>）
  提交时，将CRLF 转成 LF再提交；
  切出时，自动将LF 转为 CRLF;

  MAC/Linux:    (input)
  提交时,   将CRLF 转成 LF再提交；
  切出时，保持LF即可

  这样即可保证仓库中永远都是LF. 而且在Windows工作空间都是CRLF, 在Mac/Linux工作空间都是LF.
</code></pre><p>  <a href="http://blog.csdn.net/feng88724/article/details/11600375" target="_blank" rel="external"> [git] warning: LF will be replaced by CRLF | fatal: CRLF would be replaced by LF</a></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<pre><code>Command: git mv
<span class="operator"><span class="keyword">Show</span>: fatal: destination <span class="keyword">exists</span>
]]>
    </summary>
    
      <category term="git" scheme="http://yuqigong.github.io/tags/git/"/>
    
      <category term="technology" scheme="http://yuqigong.github.io/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git multiple coexist]]></title>
    <link href="http://yuqigong.github.io/2014/12/14/git-multiple-coexist/"/>
    <id>http://yuqigong.github.io/2014/12/14/git-multiple-coexist/</id>
    <published>2014-12-14T14:46:25.000Z</published>
    <updated>2015-01-23T06:50:30.000Z</updated>
    <content type="html"><![CDATA[<h2 id="解决多个_Git_账户共存问题">解决多个 Git 账户共存问题</h2>
<p>Git 的管理工具要求每个 Git User 需要生成一对密钥，公钥和私钥。然后把公/私钥放置于：</p>
<pre><code><span class="comment">//私钥</span>
用户<span class="regexp">/.ssh/i</span>d_rsa
<span class="comment">//公钥</span>
用户<span class="regexp">/.ssh/i</span>d_rsa.pub
</code></pre><p>并且将公钥注册于基于 Git 的代码托管库，类似Github。<br>当用户用 Git 来管理项目的时候，就是<strong>通过生成的公钥和私钥来认证用户的合法性</strong>。</p>
<p>默认情况下，多个 Git 账户无法在一台机器上协调工作。但通过配置也是可以解决共存问题。有以下两种方式：</p>
<ul>
<li>在 ssh config 文件中定义 Host</li>
<li>使用 ssh-add</li>
</ul>
<h3 id="在_ssh_config_文件中定义_Host">在 ssh config 文件中定义 Host</h3>
<p>在 <code>用户/.ssh</code> 创建 config 文件。（如果有就修改，没有则创建）</p>
<p>写入对每个 Git 账户使用独自的 ssh 密钥的配置：</p>
<p><strong>.ssh/config 注释说明</strong></p>
<pre><code>Host 别名
HostName  域名或 <span class="literal">ip</span>
User 登陆服务器用的账号
Port 端口号(默认<span class="number">22</span>，可以不填，如果服务器修改了 ssh 登录端口号，此处需要修改)
IdentityFile 密钥文件的位置
</code></pre><p><strong>配置.ssh/config</strong></p>
<pre><code><span class="comment"># account for the home repo</span>
<span class="title">Host</span> home.github.com
    HostName github.com
    User inadarei
    IdentitiesOnly <span class="built_in">yes</span>
    IdentityFile ~/.ssh/id_rsa_home

<span class="comment"># account for the work repo</span>
Host work.github.com
    HostName github.com
    User inadarei
    IdentitiesOnly <span class="built_in">yes</span>
    IdentityFile ~/.ssh/id_rsa_work
</code></pre><p>这样不同的 Git 账户会使用不同的密钥，但前提是这些密钥都已经按照 config 文件中的配置要求正确放置和命名。</p>
<p><strong>配置git仓库</strong></p>
<pre><code>git remote <span class="built_in">add</span> origin git@work.github.<span class="keyword">com</span>
</code></pre><p>需要把 Git 的配置更改过来，其中 github.com 更换为 work.github.com，这样它会找到对应的 key 来登录。</p>
<h3 id="使用_ssh-add">使用 ssh-add</h3>
<pre><code><span class="comment"># start the ssh-agent in the background // 在后台启动 ssh-agent</span>
ssh-agent -s<span class="comment"> // 这个命令好像有问题，启动不了</span>
<span class="comment"># Agent pid 59566</span>
ssh-<span class="built_in">add</span> ~/.ssh/id_rsa<span class="comment"> // 添加私钥</span>
</code></pre><p>可能会遇到的问题</p>
<pre><code>以下是使用 Git Bash 执行

$ ssh-keygen -t rsa -C <span class="string">'yourname@mail.com'</span> -f id_rsa_yourname
<span class="comment">// 生成新的 SSH key：id_rsa_yourname</span>

$ ssh -T git@github.com
Warning: Permanently added <span class="string">'github.com,192.30.252.131'</span> (RSA) to the list of known hosts.
Permission denied (publickey).
<span class="comment">// 连接出错，提示没有权限</span>
<span class="comment">// 其实是因为 ssh-add 没有添加成功，或者是 config 没有正确配置</span>

$ ssh-agent
SSH_AUTH_SOCK=<span class="regexp">/tmp/</span>ssh-<span class="number">7</span>DLTiXwwx9cI/agent<span class="number">.13188</span>; <span class="keyword">export</span> SSH_AUTH_SOCK;
SSH_AGENT_PID=<span class="number">12892</span>; <span class="keyword">export</span> SSH_AGENT_PID;
echo Agent pid <span class="number">12892</span>;
<span class="comment">// 这里是输出 ssh-agent 的配置环境</span>

$ <span class="built_in">eval</span> $(ssh-agent)
Agent pid <span class="number">13284</span>
<span class="comment">// windows 下用这个命令去启动 ssh-agent</span>

$ ssh-add ~<span class="regexp">/.ssh/i</span>d_rsa_example_2
Identity added: <span class="regexp">/d/</span>Users/test/.ssh/id_rsa_example_2 (<span class="regexp">/d/</span>Users/test/.ssh/id_rsa_example_2)
<span class="comment">// 将密钥添加到 ssh-agent</span>

$ ssh-add ~<span class="regexp">/.ssh/i</span>d_rsa_example_2
Could not open a connection to your authentication agent
<span class="comment">// 在shell下执行 $ ssh-agent bash --login -i</span>
<span class="comment">// 然后执行 $ ssh-add 就好了。</span>
</code></pre><p>参考</p>
<p><a href="http://www.freshblurbs.com/blog/2013/06/22/github-multiple-ssh-keys.html" target="_blank" rel="external">Using Multiple SSH Keys with Github</a></p>
<p><a href="http://chiyx.iteye.com/blog/1872447" target="_blank" rel="external">配置多个git远程仓库的ssh-Key切换</a></p>
<p><a href="https://github.com/yuqigong/helloWorld/blob/master/git.md" target="_blank" rel="external">多个平台git共存</a></p>
<p><a href="http://wlog.cn/soft/git-ssh-server-for-debian.html" target="_blank" rel="external">搭建通过 ssh 访问的 Git 服务器</a></p>
<p><a href="http://riny.net/2014/git-ssh-key/" target="_blank" rel="external">git生成ssh key及本地解决多个ssh key的问题</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="解决多个_Git_账户共存问题">解决多个 Git 账户共存问题</h2>
<p>Git 的管理工具要求每个 Git User 需要生成一对密钥，公钥和私钥。然后把公/私钥放置于：</p>
<pre><code><span class="comment">//私钥]]>
    </summary>
    
      <category term="git" scheme="http://yuqigong.github.io/tags/git/"/>
    
      <category term="technology" scheme="http://yuqigong.github.io/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[css triangle]]></title>
    <link href="http://yuqigong.github.io/2014/08/14/css-triangle/"/>
    <id>http://yuqigong.github.io/2014/08/14/css-triangle/</id>
    <published>2014-08-14T14:46:25.000Z</published>
    <updated>2015-01-21T05:34:01.000Z</updated>
    <content type="html"><![CDATA[<p>介绍：css 画三角形<br>目标：为兼容主流浏览器和ie系列<br>原理：利用元素 <strong>border</strong> 属性<br>已知问题：ie下以及老旧的浏览器下会存在锯齿、可能还需要 <strong>css hack</strong> 来解决视觉显示问题</p>
<p>代码示例，</p>
<script src="https://gist.github.com/flyfishtome/94628ca6d7dfa681dac2.js"></script>]]></content>
    <summary type="html">
    <![CDATA[<p>介绍：css 画三角形<br>目标：为兼容主流浏览器和ie系列<br>原理：利用元素 <strong>border</strong> 属性<br>已知问题：ie下以及老旧的浏览器下会存在锯齿、可能还需要 <strong>css hack</strong> 来解决视觉显示问题]]>
    </summary>
    
      <category term="css" scheme="http://yuqigong.github.io/tags/css/"/>
    
      <category term="technology" scheme="http://yuqigong.github.io/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[css 3d]]></title>
    <link href="http://yuqigong.github.io/2014/07/14/css-3d/"/>
    <id>http://yuqigong.github.io/2014/07/14/css-3d/</id>
    <published>2014-07-14T14:46:25.000Z</published>
    <updated>2015-01-21T05:34:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="透视">透视</h2>
<p>激活 <em>3d空间</em>，需要元素有透视效果。可以有两个方式让元素具有透视效果：使用 transform 属性，它拥有 perspective 功能函数。</p>
<pre><code><span class="attribute">transform</span><span class="value">: <span class="function">perspective</span>(<span class="number">600px</span>);</span>
</code></pre><p>或者使用 perspective 属性。</p>
<pre><code><span class="attribute">perspective</span>: <span class="string">600px</span>
</code></pre><p>这两种方式都触发一个 <em>3d空间</em>，但是有一个区别。使用 perspective 功能函数可以方便应用 3d 变换一个元素。但是当应用在多个元素，转换后的元素不会按预计的排列。<strong>如果你使用相同的变换应用在不同的元素上，每个元素都会有自己的消失点</strong>。为了补救这个问题，在父级元素使用 perspective 属性，这样每个子元素都可以共享相同的 <em>3d空间</em>。</p>
<p>perspective 的值决定了 3d 效果的强度。把它看作一个对象与观众的距离。值越大，则距离越远，视觉效果也越不强烈。<code>perspective: 2000px</code> 产生一个巨大的 3d效果，像一个小虫观看巨大的物体。</p>
<p>默认情况下,消失点的位置在三维空间定位的中心。你可以通过属性 perspective-origin 改变消失点的位置。</p>
<p>reference:</p>
<p><a href="http://desandro.github.io/3dtransforms/" target="_blank" rel="external">Intro to CSS 3D transforms</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="透视">透视</h2>
<p>激活 <em>3d空间</em>，需要元素有透视效果。可以有两个方式让元素具有透视效果：使用 transform 属性，它拥有 perspective 功能函数。</p>
<pre><code><span class="attribu]]>
    </summary>
    
      <category term="css" scheme="http://yuqigong.github.io/tags/css/"/>
    
      <category term="technology" scheme="http://yuqigong.github.io/categories/technology/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 模拟器安装过程]]></title>
    <link href="http://yuqigong.github.io/2014/07/13/android-install/"/>
    <id>http://yuqigong.github.io/2014/07/13/android-install/</id>
    <published>2014-07-13T12:46:25.000Z</published>
    <updated>2015-01-21T05:33:52.000Z</updated>
    <content type="html"><![CDATA[<h3 id="配置_java_环境">配置 java 环境</h3>
<pre><code>[<span class="link_label">java 下载</span>](<span class="link_url">http://www.oracle.com/technetwork/java/javase/downloads/index.html</span>)
新建环境变量（<span class="emphasis">*Path*</span> \ <span class="emphasis">*CLASSPATH*</span> \ <span class="emphasis">*JAVA_HOME*</span>）[<span class="link_label">参考</span>](<span class="link_url">http://www.cnblogs.com/cc11cc/archive/2012/11/08/2759027.html</span>)
</code></pre><h3 id="安装_Android_SDK_Manager">安装 Android SDK Manager</h3>
<pre><code>[<span class="link_label">Android SDK Manager 下载</span>](<span class="link_url">http://developer.android.com/sdk/index.html</span>)
</code></pre><p>下载可能出现问题，需要在 <em>hots</em> 里面修改，如下</p>
<pre><code><span class="number">74.125</span>.<span class="number">237.1</span>    <span class="keyword">dl</span>-ssl.google.<span class="keyword">com</span>
<span class="number">203.208</span>.<span class="number">46.146</span>    <span class="keyword">dl</span>.google.<span class="keyword">com</span>
<span class="number">203.208</span>.<span class="number">46.146</span>    <span class="keyword">dl</span>-ssl.google.<span class="keyword">com</span>
</code></pre><p>除了修改 <em>hots</em> 还需要设置 Android SDK Manager <a href="http://jingyan.baidu.com/article/8275fc86dbe84046a03cf69d.html" target="_blank" rel="external">参考</a></p>
<h3 id="创建_Android_Virtual_Device">创建 Android Virtual Device</h3>
<p>可能会遇到这样的问题 <em>panic:could not open:XXX(设备名称)</em>，解决如下：</p>
<pre><code>新建环境变量： <span class="emphasis">*ANDROID_SDK_HOME*</span>
路径可以自定义，不可出现中文，例如：D:\Program Files\Android [<span class="link_label">参考</span>](<span class="link_url">http://jingyan.baidu.com/article/91f5db1beb12d41c7f05e39f.html</span>)
</code></pre><h3 id="其他内容">其他内容</h3>
<p><a href="http://www.cnblogs.com/meil/archive/2012/05/24/2516055.html" target="_blank" rel="external">Android开发调试工具ADB的使用</a></p>
<p><a href="http://www.crifan.com/android_emulator_run_too_slow_in_debug_mode/" target="_blank" rel="external">Android的模拟器，在ADT中调试运行AVD时，速度太慢，极其的慢</a></p>
<p><a href="http://software.intel.com/zh-cn/articles/installation-instructions-for-intel-hardware-accelerated-execution-manager-windows-cn" target="_blank" rel="external">英特尔®硬件加速执行管理器安装指南</a></p>
<p><a href="http://envyandroid.com/archives/794/intel-haxm-hardware-acceleration-on-android-emulator" target="_blank" rel="external">Use Intel HAXM Hardware acceleration to drastically speed up your Android emulator</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="配置_java_环境">配置 java 环境</h3>
<pre><code>[<span class="link_label">java 下载</span>](<span class="link_url">http://www.oracle.com/techne]]>
    </summary>
    
      <category term="mobile" scheme="http://yuqigong.github.io/tags/mobile/"/>
    
      <category term="learn" scheme="http://yuqigong.github.io/categories/learn/"/>
    
  </entry>
  
</feed>
